
%11 Ќайти количество чисел, взаимно простых с заданным(Ќќƒ=1)
nod(A,0,A):-!.
nod(_,0,_):-!,fail.
nod(A,B,C):-R is A mod B,nod(B,R,C).
%рекурси€ вверх
countU(X, Count):- countU2(X, X, Count).
countU2(_, 1, 1):-!.
countU2(X, CurDel, Count):-
    CurDel1 is CurDel-1,
    countU2(X, CurDel1, Count1),
    nod(X, CurDel, NOD),
   (    NOD is 1,
    Count is Count1+1, !;
    Count is Count1).

%рекурси€ вниз
countD(X, Count):-countD(X, 1, X, Count).
countD(_, Count, 1, Count):-!.
countD(X, C, CurDel, Count):-CurDel1 is CurDel-1, nod(X, CurDel, NOD),
(NOD is 1, C1 is C+1, countD(X, C1, CurDel1, Count),!;countD(X, C, CurDel1, Count)).

% 12- делитель числа,€вл взаимно-простым с наиб кол-вом цифр
% данного числа.

%рассматриваетс€ один делитель
f(X, Del, Count):-f(X, Del, 0, Count).
f(0, _, Count, Count):-!.
f(X, Del, C, Count):-
    X1 is X div 10, Dig is X mod 10,
    (nod(Dig, Del, NOD), NOD is 1, C1 is C+1, f(X1, Del, C1, Count),!;
    f(X1, Del, C, Count)).


%проход по всем делител€м и поиск необходимого
f12(X, Result):-f12(X, X, 0, 0, Result).
f12(_, 1, Result, _, Result):-!.
f12(X, CurDel, MaxDel, MaxCount, Result):-
    CurDel1 is CurDel-1, Ost is X mod CurDel,
    (Ost is 0, f(X, CurDel, Count), Count>MaxCount, f12(X, CurDel1, CurDel, Count, Result),!;
    f12(X, CurDel1, MaxDel, MaxCount, Result)).

% 13-число избыточное-сумма его делителей больше самого числа.
%Ќайдите количество чисел, меньшее 20000,которые нельз€ представить в виде суммы двух чисел с избытком.


%14-ѕостроить предикат, получающий длину списка.
list_length([H|T], N):-list_length([H|T], 0, N).
list_length([], N, N):-!.
list_length([_|T], Count, N):- Count1 is Count+1, list_length(T, Count1, N).

%15-20
% предикат чтени€ и предикат вывода.
readList(0, []) :- !.
readList(I, [X|T]) :- write("input - "),read(X), I1 is I - 1, readList(I1, T).

writeList([]) :- !.
writeList([X|T]) :- write(X), nl, writeList(T).

%предикат добавлени€ элементов
append([],X,X).
append([X|T],Y,[X|T1]) :- append(T,Y,T1).
%15(1)-количество элементов, расположенных после последнего максимального.

%находим индекс максимального элемента
indMax([H|T], Ind):-indMax(T,Ind,0,1,H).
indMax([],Ind,Ind,_,_):-!.
indMax([H|T],Ind,IndMax,NowInd,MaxEl):-
    (H>=MaxEl, NewIndMax is NowInd,NewMax is H;
    NewIndMax is IndMax,NewMax is MaxEl),
    NewNowInd is NowInd+1,
    indMax(T,Ind,NewIndMax,NewNowInd,NewMax).

%вывод необходимых элементов
task15:-write("Input lenght for list: "), read(Count),readList(Count,List),
    write("Number of elements after max: "),
    list_length(List,Len),indMax(List,IndMax),
    X is Len-IndMax-1, write(X),!.

% 16(12)-переставить в обратном пор€дке элементы массива, расположенные
% между его мин и максимальным элементами.
%
indMin([H|T], Ind):-indMin(T,Ind,0,1,H).
indMin([],Ind,Ind,_,_):-!.
indMin([H|T],Ind,IndMin,NowInd,MinEl):-
    (H<MinEl, NewIndMin is NowInd,NewMin is H;
    NewIndMin is IndMin,NewMin is MinEl),
    NewNowInd is NowInd+1,
    indMin(T,Ind,NewIndMin,NewNowInd,NewMin).

makeEmptyList([]).

%добавление элементов из интервала  в новый список
cutList(List,From,To,NewList):-cutList(List,From,To,NewList,0).
cutList([],From,To,NewList,I):-makeEmptyList(NewList),!.
cutList([H|T],From,To,NewList,I):-
    I1 is I+1,
    (
        I>=From,
        (
            I<To,
            cutList(T,From,To,NewList1,I1),
            append([H],NewList1,NewList);
            makeEmptyList(NewList)
        );
        cutList(T,From,To,NewList,I1)
    ),
    !.
%находим индекс
takeIndex(List,Index,Elem):-takeIndex(List,Index,Elem,0).
takeIndex([H|T],Index,Elem,I):-
    I1 is I+1,
    (
        I is Index,
        Elem is H;
        takeIndex(T,Index,Elem,I1)
    ),
    !.
%добавление элементов в  новый список инвертиру€
swapList(List,NewList):-list_length(List,Length),Length1 is Length-1,swapList(List,NewList,Length1).
swapList(List,NewList,-1):-makeEmptyList(NewList),!.
swapList(List,NewList,I):-
    takeIndex(List,I,Elem),
    I1 is I-1,
    swapList(List,NewList1,I1),
    append([Elem],NewList1,NewList),
    !.

swapBetweenMinAndMax(List,NewList):-
    list_length(List,Length),
    indMax(List,IndMax),
    indMin(List,IndMin),
    (
        IndMax < IndMin,

        IndMax1 is IndMax+1,
        cutList(List,0,IndMax1,FirstPart), %перва€ часть
        cutList(List,IndMax1,IndMin,SecondPart), %2
        cutList(List,IndMin,Length,ThirdPart); %3

        IndMin1 is IndMin+1,
        cutList(List,0,IndMin1,FirstPart),
        cutList(List,IndMin1,IndMax,SecondPart),
        cutList(List,IndMax,Length,ThirdPart)
    ),
    swapList(SecondPart,SwapedSecondPart), %инвертируем вторую часть
    append(FirstPart,SwapedSecondPart,FSPart), %соедин€ем первую и вторую перевернутую
    append(FSPart,ThirdPart,NewList). %соедин€ем все части

task16:- write("Input lenght for list: "), read(Count),readList(Count,List),swapBetweenMinAndMax(List,NewList),writeList(NewList),!.

